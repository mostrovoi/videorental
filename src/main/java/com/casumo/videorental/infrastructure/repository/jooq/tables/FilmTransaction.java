/*
 * This file is generated by jOOQ.
 */
package com.casumo.videorental.infrastructure.repository.jooq.tables;


import com.casumo.videorental.infrastructure.repository.jooq.Indexes;
import com.casumo.videorental.infrastructure.repository.jooq.Keys;
import com.casumo.videorental.infrastructure.repository.jooq.Public;
import com.casumo.videorental.infrastructure.repository.jooq.tables.records.FilmTransactionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FilmTransaction extends TableImpl<FilmTransactionRecord> {

    private static final long serialVersionUID = -1759551892;

    /**
     * The reference instance of <code>PUBLIC.FILM_TRANSACTION</code>
     */
    public static final FilmTransaction FILM_TRANSACTION = new FilmTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmTransactionRecord> getRecordType() {
        return FilmTransactionRecord.class;
    }

    /**
     * The column <code>PUBLIC.FILM_TRANSACTION.FILM_TRANSACTION_ID</code>.
     */
    public final TableField<FilmTransactionRecord, String> FILM_TRANSACTION_ID = createField("FILM_TRANSACTION_ID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FILM_TRANSACTION.FILM_ID</code>.
     */
    public final TableField<FilmTransactionRecord, String> FILM_ID = createField("FILM_ID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FILM_TRANSACTION.CUSTOMER_ID</code>.
     */
    public final TableField<FilmTransactionRecord, String> CUSTOMER_ID = createField("CUSTOMER_ID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FILM_TRANSACTION.NUM_DAYS</code>.
     */
    public final TableField<FilmTransactionRecord, Integer> NUM_DAYS = createField("NUM_DAYS", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FILM_TRANSACTION.ACTION</code>.
     */
    public final TableField<FilmTransactionRecord, String> ACTION = createField("ACTION", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FILM_TRANSACTION.CREATED_ON</code>.
     */
    public final TableField<FilmTransactionRecord, Timestamp> CREATED_ON = createField("CREATED_ON", org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.FILM_TRANSACTION</code> table reference
     */
    public FilmTransaction() {
        this(DSL.name("FILM_TRANSACTION"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.FILM_TRANSACTION</code> table reference
     */
    public FilmTransaction(String alias) {
        this(DSL.name(alias), FILM_TRANSACTION);
    }

    /**
     * Create an aliased <code>PUBLIC.FILM_TRANSACTION</code> table reference
     */
    public FilmTransaction(Name alias) {
        this(alias, FILM_TRANSACTION);
    }

    private FilmTransaction(Name alias, Table<FilmTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private FilmTransaction(Name alias, Table<FilmTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FilmTransaction(Table<O> child, ForeignKey<O, FilmTransactionRecord> key) {
        super(child, key, FILM_TRANSACTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_CUSTOMER_ID_FILM_TRANSACTION_INDEX_F, Indexes.FK_FILM_ID_FILM_TRANSACTION_INDEX_F, Indexes.PRIMARY_KEY_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FilmTransactionRecord> getPrimaryKey() {
        return Keys.PK_FILM_TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FilmTransactionRecord>> getKeys() {
        return Arrays.<UniqueKey<FilmTransactionRecord>>asList(Keys.PK_FILM_TRANSACTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FilmTransactionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FilmTransactionRecord, ?>>asList(Keys.FK_FILM_ID_FILM_TRANSACTION, Keys.FK_CUSTOMER_ID_FILM_TRANSACTION);
    }

    public Film film() {
        return new Film(this, Keys.FK_FILM_ID_FILM_TRANSACTION);
    }

    public Customer customer() {
        return new Customer(this, Keys.FK_CUSTOMER_ID_FILM_TRANSACTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilmTransaction as(String alias) {
        return new FilmTransaction(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilmTransaction as(Name alias) {
        return new FilmTransaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmTransaction rename(String name) {
        return new FilmTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmTransaction rename(Name name) {
        return new FilmTransaction(name, null);
    }
}
